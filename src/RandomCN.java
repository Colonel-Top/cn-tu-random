/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.util.ArrayList;
import java.util.Random;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author proms
 */
public class RandomCN extends javax.swing.JFrame {

    /**
     * Creates new form RandomCN
     */
    static ArrayList<Integer> numberList = new ArrayList<Integer>();
    static int walker = 0;

    public RandomCN() throws IOException {

        initComponents();

    }

    public static void restat() throws IOException {

        out = new BufferedWriter(new FileWriter("cnList.col", true));
        nickfield.setText("");

    }

    static BufferedWriter out;
    static boolean isobjstreamclose = false;
    StringBuilder outer = new StringBuilder("");
    private static final String[] ArrayCode = {null, "UQZJBT", "YPMXUI", "ARQJNY", "WDHGUB",
        "RSUKNA", "YIRCOQ", "VQTAIP", "SDQXTT", "IQTSNU",
        "YROALE", "WDQOLQ", "YOGABQ", "DDWNQY", "YLGAWC",
        "YZMWAE", "LBIKNY", "YMQTZR", "YQGXIS", "QZUUKZ",
        "VLRVBC", "YMKLVN", "QBHGIX", "MIUUWB", "RQQALE",
        "YSRBUD", "YBCLLS", "DQTKUX", "IRKUVQ"};

    public static String call(int index) {
        return ArrayCode[index];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        loadButton = new javax.swing.JButton();
        numberLb = new javax.swing.JLabel();
        nickfield = new javax.swing.JTextField();
        codefield = new javax.swing.JTextField();
        randomButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        encryptbutton = new javax.swing.JButton();
        randtext = new javax.swing.JLabel();
        fullText = new javax.swing.JLabel();
        countrand = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("ROTG V.1.0");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeyet(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel2.setText("Terms & Agreements");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 380, 140, 14);

        loadButton.setText("Load Last Random");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        getContentPane().add(loadButton);
        loadButton.setBounds(513, 373, 160, 20);

        numberLb.setFont(new java.awt.Font("Tahoma", 0, 72)); // NOI18N
        numberLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        numberLb.setText("##");
        getContentPane().add(numberLb);
        numberLb.setBounds(540, 100, 120, 120);

        nickfield.setFont(new java.awt.Font("Angsana New", 0, 36)); // NOI18N
        nickfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nickfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nickfieldActionPerformed(evt);
            }
        });
        getContentPane().add(nickfield);
        nickfield.setBounds(200, 160, 260, 50);

        codefield.setEditable(false);
        codefield.setFont(new java.awt.Font("Angsana New", 0, 36)); // NOI18N
        codefield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(codefield);
        codefield.setBounds(200, 250, 260, 40);

        randomButton.setBackground(new java.awt.Color(204, 204, 204));
        randomButton.setFont(new java.awt.Font("AngsanaUPC", 0, 36)); // NOI18N
        randomButton.setText("Random");
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });
        getContentPane().add(randomButton);
        randomButton.setBounds(100, 330, 140, 40);

        clearButton.setFont(new java.awt.Font("AngsanaUPC", 0, 36)); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        getContentPane().add(clearButton);
        clearButton.setBounds(330, 330, 150, 40);

        encryptbutton.setText("Encrypt to Files");
        encryptbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptbuttonActionPerformed(evt);
            }
        });
        getContentPane().add(encryptbutton);
        encryptbutton.setBounds(700, 370, 190, 23);

        randtext.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        randtext.setText("Random Count:");
        getContentPane().add(randtext);
        randtext.setBounds(510, 340, 100, 14);

        fullText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fullText.setText("/ 28");
        getContentPane().add(fullText);
        fullText.setBounds(650, 340, 34, 14);

        countrand.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        countrand.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        countrand.setText("0");
        getContentPane().add(countrand);
        countrand.setBounds(620, 340, 20, 14);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/GUIBG.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 700, 400);

        logArea.setEditable(false);
        logArea.setBackground(new java.awt.Color(165, 161, 162));
        logArea.setColumns(20);
        logArea.setRows(5);
        jScrollPane1.setViewportView(logArea);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(700, 0, 190, 370);

        setSize(new java.awt.Dimension(909, 433));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed
        if (nickfield.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Your name are empty !");
        } else {
            try {
                int comefromrand = random();
                if (walker < 29) {
                    outer.append(Integer.toString(comefromrand));
                    outer.append(" ");
                    outer.append(nickfield.getText());
                    outer.append(" ");
                    outer.append(call(comefromrand));
                    logArea.append(outer.toString() + "\n");
                    out.write(outer.toString());
                    out.newLine();
                    outer.replace(0, outer.length(), "");
                    codefield.setText(call(comefromrand));
                    numberLb.setText(Integer.toString(comefromrand));
                    if (walker == 28) {
                        JOptionPane.showMessageDialog(null, "Random Complete 28 Times Terminate Output Stream\nSaved to files");
                        try {
                            out.close();
                            encryptbutton.setText("Encrypted & Saved!");
                            JOptionPane.showMessageDialog(null, "Files Saved");
                            nickfield.setEnabled(false);
                            encryptbutton.setEnabled(false);
                            randomButton.setEnabled(false);
                            clearButton.setEnabled(false);
                            obj_reg();
                            //System.exit(1);
                        } catch (IOException ex) {
                            Logger.getLogger(RandomCN.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(RandomCN.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(RandomCN.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_randomButtonActionPerformed
    private static void obj_call() throws FileNotFoundException, IOException, ClassNotFoundException {
        ObjectInputStream ois = new ObjectInputStream(new FileInputStream("record.col"));
        ArrayList<Integer> tmp = (ArrayList<Integer>) ois.readObject();
        numberList = tmp;
        for (int a : numberList) {
            System.out.println(a);
        }
    }

    private static void obj_reg() throws FileNotFoundException, IOException {
        FileOutputStream fout = new FileOutputStream("record.col");
        ObjectOutputStream oout = new ObjectOutputStream(fout);
        oout.writeObject(numberList);
        System.out.println("Objstream done");
        oout.close();
        System.out.println("Objstream Closed");
    }
    private void encryptbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptbuttonActionPerformed
        try {
            out.close();
            encryptbutton.setText("Encrypted & Saved!");
            JOptionPane.showMessageDialog(null, "Wrote to files Successfully Terminated Fields\nPlease Exit if you want");
            encryptbutton.setEnabled(false);
            randomButton.setEnabled(false);
            clearButton.setEnabled(false);
            nickfield.setEnabled(false);
            loadButton.setEnabled(false);
            obj_reg();

            isobjstreamclose = true;
            //System.exit(1);

        } catch (IOException ex) {
            Logger.getLogger(RandomCN.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_encryptbuttonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        nickfield.setText("");        // TODO add your handling code here:
        codefield.setText("");
        numberLb.setText("##");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void nickfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nickfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nickfieldActionPerformed

    private void closeyet(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeyet
        // TODO add your handling code here:
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int result = JOptionPane.showConfirmDialog(null, "Are you sure to EXIT ? \n Note : If Exit with not save to files Result will not write into files !", "Warning", dialogButton);
        if (result == JOptionPane.YES_OPTION) {
            if (isobjstreamclose == false) {

            }
            System.exit(0);
        }
    }//GEN-LAST:event_closeyet

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        JOptionPane.showMessageDialog(null, "Agreement:\nThis Software allow to use only in Thammasat University Faculty of Engineering, \nBy using this software in another place or use prohibited  \nwithout owner permission will follow international laws of software\nand maximum proceed by laws\n\n\t Promsurin Phutthammawong CN15");
    }//GEN-LAST:event_jLabel2MouseClicked

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        try {
            // TODO add your handling code here:
            if (isobjstreamclose == false) {
                obj_call();
                System.out.println(numberList.size());
                isobjstreamclose = true;
                encryptbutton.setEnabled(true);
                randomButton.setEnabled(true);
                clearButton.setEnabled(true);
                nickfield.setEnabled(true);
                countrand.setText(Integer.toString(numberList.size()));
                walker = numberList.size();
                FileReader reader = new FileReader("cnList.col");
                BufferedReader in = new BufferedReader(reader);
                String tmp = in.readLine();
                if (tmp != null) {
                    do {
                        logArea.append(tmp);
                        logArea.append("\n");
                        tmp = in.readLine();
                    } while (tmp != null);
                }

            }
        } catch (EOFException ex) {
            System.out.println(ex.getMessage());
            ex.printStackTrace();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RandomCN.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "ERROR FILE NOT FOUND");
        } catch (IOException ex) {
            Logger.getLogger(RandomCN.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RandomCN.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_loadButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RandomCN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RandomCN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RandomCN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RandomCN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        JOptionPane.showMessageDialog(null, "By using this software means you are accepting this software agreements\n\nRead more at Terms & Agreement");
        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new RandomCN().setVisible(true);
                    restat();
                    System.out.println("Startup done");
                } catch (IOException ex) {
                    Logger.getLogger(RandomCN.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public static int random() {
        Random rand = new Random();
        Integer number = rand.nextInt(28) + 1;

        while (numberList.contains(number)) {
            number = rand.nextInt(28) + 1;
        }
        numberList.add(number);
        walker++;
        System.out.println(numberList.size());
        countrand.setText(Integer.toString(walker));
        return number;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton clearButton;
    private javax.swing.JTextField codefield;
    private static javax.swing.JLabel countrand;
    private static javax.swing.JButton encryptbutton;
    private javax.swing.JLabel fullText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JTextArea logArea;
    private static javax.swing.JTextField nickfield;
    private javax.swing.JLabel numberLb;
    private static javax.swing.JButton randomButton;
    private javax.swing.JLabel randtext;
    // End of variables declaration//GEN-END:variables
}
